@page "/"
@page "/dashboard"
@layout MainLayout
@inherits DashboardTest.Pages.DashboardComponent

@using Radzen
@using Radzen.Blazor
@using DashboardTest.Models.JmullinkProject4
@using System.Threading
@using DashboardTest.Data
<PageTitle>Dashboard</PageTitle>
<RadzenContent Container="main">
  <ChildContent>
    <RadzenHeading Size="H1" Text="Dashboard">
    </RadzenHeading>
    <RadzenHeading Text="@DateTime.Now.ToString()"></RadzenHeading>
    <RadzenPager>
    </RadzenPager>
    <div class="row justify-content-center align-items-center" style="text-align: center; width: undefinedpx">
      <div class="col-4">
        <RadzenCard style="margin-bottom: 16px; width: 340px">
          <ChildContent>
            <RadzenCard style="width: 294px">
              <ChildContent>
                <div class="row">
                  <div class="col-4">
                    <RadzenImage Path="assets/images/hbm-140-94.jpg-1200x600-93541ebc88.jpg" style="height: 100px; width: 100px">
                    </RadzenImage>
                  </div>
                  <div class="col-sm-8">
                    <RadzenHeading Size="H3" style="text-align: right" Text="Geluidssensor1">
                    </RadzenHeading>
                    <RadzenHeading Size="H6" style="margin-bottom: 0px; margin-top: ; text-align: right" Text="Huidelijk">
                    </RadzenHeading>
                    <RadzenHeading Size="H3" style="color: #68d5c8; text-align: right" Text="@Sesnorwaarde1.ToString()">
                    </RadzenHeading>
                  </div>
                </div>
              </ChildContent>
            </RadzenCard>
          </ChildContent>
        </RadzenCard>
      </div>
      <div class="col-4">
        <RadzenCard style="margin-bottom: 16px; width: 340px">
          <ChildContent>
            <RadzenCard style="width: 294px">
              <ChildContent>
                <div class="row">
                  <div class="col-4">
                    <RadzenImage Path="assets/images/hbm-140-94.jpg-1200x600-93541ebc88.jpg" style="height: 100px; width: 100px">
                    </RadzenImage>
                  </div>
                  <div class="col-sm-8">
                    <RadzenHeading Size="H3" style="text-align: right" Text="Geluidssensor1">
                    </RadzenHeading>
                    <RadzenHeading Size="H6" style="margin-bottom: 0px; text-align: right" Text="Huidelijk">
                    </RadzenHeading>
                    <RadzenHeading Size="H3" style="color: #68d5c8; text-align: right" Text="@Sesnorwaarde2.ToString()">
                    </RadzenHeading>
                  </div>
                </div>
              </ChildContent>
            </RadzenCard>
          </ChildContent>
        </RadzenCard>
      </div>
      <div class="col-4">
        <RadzenCard style="margin-bottom: 16px; width: 340px">
          <ChildContent>
            <RadzenCard style="width: 294px">
              <ChildContent>
                <div class="row">
                  <div class="col-4">
                    <RadzenImage Path="assets/images/hbm-140-94.jpg-1200x600-93541ebc88.jpg" style="height: 100px; width: 100px">
                    </RadzenImage>
                  </div>
                  <div class="col-sm-8">
                    <RadzenHeading Size="H3" style="text-align: right" Text="Geluidssensor1">
                    </RadzenHeading>
                    <RadzenHeading Size="H6" style="margin-bottom: 0px; text-align: right" Text="Huidelijk">
                    </RadzenHeading>
                    <RadzenHeading Size="H3" style="color: #68d5c8; text-align: right" Text="@Sesnorwaarde3.ToString()">
                    </RadzenHeading>
                  </div>
                </div>
              </ChildContent>
            </RadzenCard>
          </ChildContent>
        </RadzenCard>
      </div>
    </div>
    <RadzenChart ColorScheme="ColorScheme.Pastel" style="display: block; width: 1103px">
      <ChildContent>
        <RadzenLineSeries CategoryProperty="Timestamp" Data="@getMicAlexesResult.Where(p => p.Timestamp >= DateTime.Now.AddDays(-3))" Title="GeluidSensor1" ValueProperty="Decibel">
        </RadzenLineSeries>
        <RadzenLineSeries CategoryProperty="Timerstamp" Data="@getMicJorisResult.Where(p => p.Timerstamp >= DateTime.Now.AddDays(-3))" Title="GeluidSensor2" ValueProperty="Decibel">
        </RadzenLineSeries>
        <RadzenLineSeries CategoryProperty="Timestamp" Data="@getMicKaysResult.Where(p => p.Timestamp >= DateTime.Now.AddDays(-3))" Title="GeluidSensor3" ValueProperty="Decibel">
        </RadzenLineSeries>
      </ChildContent>
    </RadzenChart>
    <RadzenImage Path="assets/images/gehoorschade.png" style="width: 1104px">
    </RadzenImage>
  </ChildContent>
</RadzenContent>
@code {
    public int Sesnorwaarde1 = 0;
    public int Sesnorwaarde2 = 0;
    public int Sesnorwaarde3 = 0;
    private int Count { get; set; } = 1000;
    protected override void OnInitialized()
    {
        StartCountdown();
        try
        {
            using (var context = new JmullinkProject4Context())
            {
                var query = context.MicJoris.OrderByDescending(a => a.Timerstamp).ToList();

                Sesnorwaarde2 = context.MicJoris.OrderByDescending(a => a.Timerstamp).FirstOrDefault().Decibel;
                Sesnorwaarde1 = context.MicAlexes.OrderByDescending(a => a.Timestamp).FirstOrDefault().Decibel;
                Sesnorwaarde3 = context.MicKays.OrderByDescending(a => a.Timestamp).FirstOrDefault().Decibel;
            }
        }
        catch
        {
            Console.WriteLine("AN CRITICAL EXCEPTION HAS OCCURED!!!!!!!!");
        }

        var timer = new Timer(new TimerCallback(_ =>
        {
        // Note that the following line is necessary because otherwise
        // Blazor would not recognize the state change and not refresh the UI
        InvokeAsync(() =>
                    {

                        StateHasChanged();
                    });
        }), null, 1000, 1000);
    }

    public async Task StartCountdown()
    {
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
      {
      this.StateHasChanged();
      this.Reload();
           });
        }, null, 1000, 1000);
    }



}
