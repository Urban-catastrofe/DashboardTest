@page "/geluidssensor-2"
@layout MainLayout
@inherits DashboardTest.Pages.Geluidssensor1Component

@using DashboardTest.Data
@using Radzen
@using Radzen.Blazor
@using DashboardTest.Models.JmullinkProject4
@using System.Threading
<PageTitle>Geluidssensor 2</PageTitle>
<RadzenContent Container="main">
  <ChildContent>
    <RadzenHeading Size="H1" Text="Geluidssensor 2">
    </RadzenHeading>
     <RadzenHeading Text="@DateTime.Now.ToString()"></RadzenHeading>
    <div class="row">
      <div class="col-8">
        <RadzenCard style="height: 418px">
          <ChildContent>
            <div class="row">
              <div class="col-12">
                <RadzenDataGrid AllowColumnReorder="true" AllowColumnResize="true" AllowFiltering="true" AllowMultiColumnSorting="false" AllowPaging="true" AllowSorting="true" AllowVirtualization="true" Data="@getMicJorisResult.Where(p => p.Timerstamp >= DateTime.Now.AddDays(-1))" FilterDelay="501" IsLoading="false" TItem="DashboardTest.Models.JmullinkProject4.MicJori" PageSize="10" style="height: 365px">
                  <Columns>
                    <RadzenDataGridColumn TItem="DashboardTest.Models.JmullinkProject4.MicJori" Property="ID" Title="ID">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DashboardTest.Models.JmullinkProject4.MicJori" FormatString="{0:d}" Property="Timerstamp" Title="Timerstamp">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DashboardTest.Models.JmullinkProject4.MicJori" Property="Naam" Title="Naam">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DashboardTest.Models.JmullinkProject4.MicJori" Property="Locatie" Title="Locatie">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DashboardTest.Models.JmullinkProject4.MicJori" Property="Decibel" Title="Decibel">
                    </RadzenDataGridColumn>
                  </Columns>
                </RadzenDataGrid>
              </div>
            </div>
          </ChildContent>
        </RadzenCard>
      </div>
      <div class="col-4">
        <RadzenCard style="height: 415px; width: 381px">
          <ChildContent>
            <div class="col-md-12">
                <RadzenMenu>
            <RadzenMenuItem Text="Tijdstip">
                <RadzenMenuItem Click="@(() => OnCLicked(DateTime.Now.AddHours(-1)))" Text="Uurlijk"></RadzenMenuItem>
                <RadzenMenuItem Click="@(() => OnCLicked(DateTime.Now.AddDays(-1)))" Text="Dagelijks"  ></RadzenMenuItem>
                <RadzenMenuItem Click="@(() => OnCLicked(DateTime.Now.AddDays(-7)))" Text="Wekelijks" ></RadzenMenuItem>
                <RadzenMenuItem Click="@(() => OnCLicked(DateTime.Now.AddMonths(-1)))" Text="Maandelijks"></RadzenMenuItem>
                <RadzenMenuItem Click="@(() => OnCLicked(DateTime.Now.AddYears(-1)))" Text="Jaarlijks"></RadzenMenuItem>
                <RadzenMenuItem Click="@(() => OnCLicked(DateTime.Now.AddMinutes(-1)))" Text="minuten"></RadzenMenuItem>
                <RadzenMenuItem Click="@(() => OnCLicked(DateTime.Now.AddSeconds(-1)))" Text="seconden"></RadzenMenuItem>
                <RadzenMenuItem Click="@(() => OnCLicked(DateTime.Now.AddMilliseconds(-100)))" Text="millieseconden"></RadzenMenuItem>
            </RadzenMenuItem>
            </RadzenMenu>
            </div>
            <div class="col-md-12">
              <RadzenLabel style="font-style: normal" Text="Laagste decibel   :">
              </RadzenLabel>
              <RadzenLabel style="float: right; margin-right: 5px" Text="@waardeMin.ToString()">
              </RadzenLabel>
            </div>
            <div class="col-md-12">
              <RadzenLabel Text="Hoogste decibel:">
              </RadzenLabel>
              <RadzenLabel style="float: right;  margin-right: 5px" Text="@waardeMax.ToString()">
              </RadzenLabel>
            </div>
            <div class="col-md-12">
              <RadzenLabel Text="Gemiddelde decibel:">
              </RadzenLabel>
              <RadzenLabel style="float: right; margin-right: 5px" Text="@waardeAverage.ToString()">
              </RadzenLabel>
            </div>
            <div class="col-md-12">
              <RadzenLabel Text="Locatie:">
              </RadzenLabel>
              <RadzenLabel style="float: right; margin-right: 5px" Text="@locatie">
              </RadzenLabel>
            </div>
            <div class="col-md-12">
              <RadzenLabel Text="Aantal metingen:">
              </RadzenLabel>
              <RadzenLabel style="float: right; margin-right: 5px" Text="@aantalMetingen.ToString()">
              </RadzenLabel>
            </div>
            <div class="col-md-12">
              <RadzenLabel Text="Laatste Meting:">
              </RadzenLabel>
              <RadzenLabel style="float: right; margin-right: 5px" Text="@laatsteResultaat.ToString()">
              </RadzenLabel>
            </div>
            <div class="col-md-12">
              <RadzenLabel Text="Eerste meting:">
              </RadzenLabel>
              <RadzenLabel style="float: right; margin-right: 5px" Text="@eersteResultaat.ToString()">
              </RadzenLabel>
            </div>
            <div class="col-md-12">
              <RadzenLabel Text="Naam:">
              </RadzenLabel>
              <RadzenLabel style="float: right; margin-right: 5px" Text="@naam">
              </RadzenLabel>
            </div>
          </ChildContent>
        </RadzenCard>
      </div>
    </div>
    <RadzenProgressBar Max="140" ProgressBarStyle="ProgressBarStyle.Primary" style="float: none; height: 20px; margin-bottom: -140px; margin-top: 140px; width: 956px" Unit=" Decibel" Value="Sesnorwaarde1">
    </RadzenProgressBar>
    <RadzenImage Path="assets/images/geluidsniveaus_bewerkt.jpg" style="width: 959px">
    </RadzenImage>
    <RadzenRadialGauge>
      <ChildContent>
        <RadzenRadialGaugeScale Max="140" Min="0">
          <ChildContent>
            <RadzenRadialGaugeScalePointer Value="@Sesnorwaarde1">
              <Template Context="data">
              Decibel
              </Template>
            </RadzenRadialGaugeScalePointer>
            <RadzenRadialGaugeScaleRange Fill="#5dbf74" From="0" To="30">
            </RadzenRadialGaugeScaleRange>
            <RadzenRadialGaugeScaleRange Fill="#e6c54f" From="30" To="80">
            </RadzenRadialGaugeScaleRange>
            <RadzenRadialGaugeScaleRange Fill="#f9777f" From="80" To="120">
            </RadzenRadialGaugeScaleRange>
            <RadzenRadialGaugeScaleRange Fill="#ff6d41" From="120" To="140">
            </RadzenRadialGaugeScaleRange>
          </ChildContent>
        </RadzenRadialGaugeScale>
      </ChildContent>
    </RadzenRadialGauge>
  </ChildContent>
</RadzenContent>
@code {
    public MicAlex ?DataWaarde;
    public int waardeMax = 0;
    public int waardeMin = 0;
    public int aantalMetingen = 0;
    public double waardeAverage = 0;
    public double Sesnorwaarde1 = 0;
    public string locatie = "Norod";
    public string naam = "Norod";
    public int eersteResultaat = 0;
    public int laatsteResultaat = 0;
    public DateTime tijd = DateTime.Now.AddYears(-1);
    private int Count { get; set; } = 1000;

    protected override void OnInitialized()
    {
        StartCountdown();

        try
        {
            using (var context = new JmullinkProject4Context())
            {
                Sesnorwaarde1 = context.MicJoris.OrderByDescending(a => a.Timerstamp).FirstOrDefault().Decibel;
                Datas(tijd);


            }
        }
        catch
        {
            Console.WriteLine("AN CRITICAL EXCEPTION HAS OCCURED!!!!!!!!");
        }
    }

    private void OnCLicked(DateTime tijdstip)
    {
        Datas(tijdstip);
    }

    public void Datas(DateTime waarden)
    {
        tijd = waarden;
        try
        {
            using (var context = new JmullinkProject4Context())
            {
                var data = context.MicJoris.OrderByDescending(a => a.Timerstamp).Where(p => p.Timerstamp >= waarden);
                waardeMax = data.Max(a => a.Decibel);
                waardeMin = data.Min(a => a.Decibel);
                waardeAverage = data.Average(a => a.Decibel);
                aantalMetingen = data.Count();
                locatie = data.FirstOrDefault().Locatie;
                naam = data.FirstOrDefault().Naam;
                eersteResultaat = data.LastOrDefault().Decibel;
                laatsteResultaat = data.FirstOrDefault().Decibel;
            }
        }
        catch
        {
            Console.Write("ERRRORRRRRRRRRRRR");
        }

    }

    public async Task StartCountdown()
    {
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
      {
      this.StateHasChanged();
      this.Reload();
      this.Datas(tijd);
           });
        }, null, 1000, 1000);
    }
}